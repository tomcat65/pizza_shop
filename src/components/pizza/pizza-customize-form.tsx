"use client"

import { useState, useEffect } from 'react'
import { Button } from '../ui/button'
import { Card } from '../ui/card'
import { Separator } from '../ui/separator'
import { DatabaseTopping } from '@/lib/types/cart'
import { Checkbox } from '../ui/checkbox'
import { RadioGroup, RadioGroupItem } from '../ui/radio-group'
import { Label } from '../ui/label'
import { ShoppingCart } from 'lucide-react'
import { useCartStore } from '@/lib/store/cart'
import { useUIStore } from '@/lib/store/ui'
import { toast } from 'sonner'

interface PizzaCustomizeFormProps {
  toppings: DatabaseTopping[]
  defaultToppingIds: Array<{ id: string; isGrilled: boolean | null }>
  itemType: "pizza" | "cheesesteak"
  size: "Personal (10\")" | "Regular (12\")" | "Family (17\")"
  itemName: string
  itemId: string
  basePrice: number
}

export default function PizzaCustomizeForm({
  toppings,
  defaultToppingIds,
  itemType,
  size,
  itemName,
  itemId,
  basePrice
}: PizzaCustomizeFormProps) {
  const [mounted, setMounted] = useState(false)
  const [selectedToppings, setSelectedToppings] = useState<Array<{ topping: DatabaseTopping; isGrilled?: boolean }>>([])
  const addToCart = useCartStore((state) => state.addToCart)
  const cartItems = useCartStore((state) => state.cartItems)
  const toggleCart = useUIStore((state) => state.toggleCart)

  useEffect(() => {
    setMounted(true)
  }, [])

  const handleToppingToggle = (topping: DatabaseTopping, isGrilled?: boolean) => {
    setSelectedToppings(prev => {
      const exists = prev.find(t => t.topping.id === topping.id)
      
      // If topping exists and we're toggling grilled state
      if (exists && isGrilled !== undefined) {
        return prev.map(t => 
          t.topping.id === topping.id 
            ? { ...t, isGrilled } 
            : t
        )
      }
      
      // If topping exists and we're removing it
      if (exists) {
        return prev.filter(t => t.topping.id !== topping.id)
      }
      
      // If topping doesn't exist, add it
      return [...prev, { topping, isGrilled: isGrilled ?? false }]
    })
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    // Get the size object with price adjustment
    const sizeObj = {
      id: size,
      name: size,
      price_adjustment: (() => {
        switch (size) {
          case 'Personal (10")':
            return -2
          case 'Family (17")':
            return 5
          default:
            return 0
        }
      })()
    }

    // Ensure all price values are numbers
    const itemBasePrice = Number(basePrice) || 0
    const sizeAdjustment = Number(sizeObj.price_adjustment) || 0

    addToCart({
      itemId,
      name: itemName,
      basePrice: itemBasePrice,
      size: {
        ...sizeObj,
        price_adjustment: sizeAdjustment
      },
      toppings: selectedToppings.map(({ topping, isGrilled }) => ({
        id: topping.id,
        name: defaultToppingIds.some(dt => dt.id === topping.id) ? `XTRA-${topping.name}` : topping.name,
        price: Number(topping.price) || 0,
        isGrilled
      })),
      quantity: 1,
      specialInstructions: '',
      crustType: 'regular',
      cartId: '' // This will be generated by the store
    })

    toast.success('Added to cart!', {
      description: `${itemName} - ${size} has been added to your cart.`,
      duration: 3000
    })

    toggleCart()
  }

  const handleCartClick = () => {
    if (!mounted) return
    toggleCart()
  }

  const isToppingSelected = (toppingId: string) => {
    return selectedToppings.some(t => t.topping.id === toppingId)
  }

  const getToppingGrilledState = (toppingId: string) => {
    const selected = selectedToppings.find(t => t.topping.id === toppingId)
    return selected?.isGrilled || false
  }

  const getToppingLabel = (topping: DatabaseTopping, isGrilled?: boolean) => {
    const isDefault = defaultToppingIds.some(t => t.id === topping.id)
    const isSelected = selectedToppings.some(t => t.topping.id === topping.id)
    
    let label = topping.name
    if (isGrilled) {
      label = `Grilled ${label}`
    }
    
    // Show XTRA only when selecting a topping that's already included in the pizza
    if (isDefault && isSelected) {
      label = `XTRA-${label}`
    }
    
    if (topping.price > 0) {
      label = `${label} (+$${topping.price.toFixed(2)})`
    }
    
    return label
  }

  // Filter toppings for pizza and group by category
  const pizzaToppings = toppings.filter(t => 
    (t.item_type === 'pizza' || t.item_type === 'both') && 
    t.name !== 'Don Peppino Original Pizza Sauce'
  )
  
  const groupedToppings = pizzaToppings.reduce<Record<string, DatabaseTopping[]>>((acc, topping) => {
    if (!acc[topping.category]) {
      acc[topping.category] = []
    }
    acc[topping.category].push(topping)
    return acc
  }, {})

  // Sort categories in preferred order
  const categories = ['cheese', 'meat', 'veggie'].filter(cat => groupedToppings[cat]?.length > 0)

  return (
    <Card className="p-6">
      <h2 className="text-2xl font-bold mb-4">Customize Your {itemName}</h2>
      <p className="text-gray-600 mb-4">Size: {size}</p>

      <form onSubmit={handleSubmit} className="space-y-6">
        {categories.map(category => (
          <div key={category} className="space-y-4">
            <div>
              <h3 className="text-lg font-semibold capitalize mb-4">{category}</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {groupedToppings[category].map(topping => {
                  console.log(`Topping ${topping.name}:`, {
                    category: topping.category,
                    veggie_state: topping.veggie_state,
                    isSelected: isToppingSelected(topping.id)
                  })
                  return (
                  <div key={topping.id} className="space-y-2">
                    <div className="flex items-center gap-2">
                      <Checkbox
                        id={topping.id}
                        checked={isToppingSelected(topping.id)}
                        onCheckedChange={() => handleToppingToggle(topping)}
                      />
                      <label htmlFor={topping.id} className="text-sm">
                        {getToppingLabel(topping, getToppingGrilledState(topping.id))}
                      </label>
                    </div>
                    
                    {/* Show Natural/Grilled options for veggies */}
                    {category === 'veggie' && (
                      <div className="ml-6">
                        <RadioGroup
                          value={getToppingGrilledState(topping.id) ? 'grilled' : 'natural'}
                          onValueChange={(value: 'natural' | 'grilled') => handleToppingToggle(topping, value === 'grilled')}
                          className="flex items-center gap-4"
                          disabled={!isToppingSelected(topping.id)}
                        >
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="natural" id={`natural-${topping.id}`} />
                            <Label htmlFor={`natural-${topping.id}`} className={`text-sm ${!isToppingSelected(topping.id) ? 'text-gray-400' : ''}`}>
                              Natural
                            </Label>
                          </div>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value="grilled" id={`grilled-${topping.id}`} />
                            <Label htmlFor={`grilled-${topping.id}`} className={`text-sm ${!isToppingSelected(topping.id) ? 'text-gray-400' : ''}`}>
                              Grilled
                            </Label>
                          </div>
                        </RadioGroup>
                      </div>
                    )}
                  </div>
                  )
                })}
              </div>
            </div>
            {category !== categories[categories.length - 1] && <Separator className="my-4" />}
          </div>
        ))}

        <Button type="submit" className="w-full">
          Add to Cart
        </Button>
      </form>

      {/* Floating Cart Button */}
      <button
        onClick={handleCartClick}
        className="fixed right-6 bottom-6 z-50 flex h-16 w-16 items-center justify-center rounded-full bg-philly-green-500 text-white shadow-xl hover:bg-philly-green-600 focus:outline-none focus:ring-4 focus:ring-philly-green-400 focus:ring-offset-2 transition-all duration-200 ease-in-out"
      >
        <ShoppingCart className="h-8 w-8" />
        {mounted && cartItems?.length > 0 && (
          <span className="absolute -right-2 -top-2 flex h-7 w-7 items-center justify-center rounded-full bg-philly-red text-sm font-bold text-white shadow-lg">
            {cartItems.length}
          </span>
        )}
      </button>
    </Card>
  )
} 